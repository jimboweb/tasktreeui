{"version":3,"sources":["logo.svg","util/formUtil.js","Category.js","CategoryList.js","LoginForm.js","util/fetchUtil.js","User.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","formUtil","composeXWwwFormUrlEncoded","obj","Object","keys","map","key","encodeURIComponent","join","Category","CategoryList","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","components","fetchOptions","method","headers","Headers","x-access-token","categories","undefined","react_default","a","createElement","className","id","xAccessToken","Component","LoginForm","username","password","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","name","value","login","preventDefault","type","onChange","onClick","fetchUtil","getData","route","callback","fetchData","postData","data","putData","deleteData","patchData","Content-Type","mode","redirect","body","request","Request","fetch","then","resp","json","respData","User","apiUrl","uiUrl","_this2","responseData","token","src_CategoryList","src_LoginForm","App","src_User","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.87f59fc4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","\nconst formUtil = {\n    composeXWwwFormUrlEncoded: function(obj){\n        //FIXME: obj.params is not a thing. what should it be?\n        return Object.keys(obj).map((key) => {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\n        }).join('&');\n    }\n}\n\nexport default formUtil;","import React from \"react\";\nimport './App.css';\n\n\nfunction Category(props){\n    return(\n        <div className=\"category\" id={props.id}>\n\n        </div>\n    );\n}\n\nexport default Category;","import React, { Component } from 'react';\nimport './App.css';\nimport Category from './Category';\n\nclass CategoryList extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            components: [],\n            fetchOptions: {\n                method: 'get'\n            },\n            headers: new Headers({\n                'x-access-token': this.props['xAccessToken']\n            }),\n            categories: undefined\n        };\n    }\n\n\n    render() {\n        if (!this.state.categories) {\n            //fetch categories\n            return (\n                <div>loading gif...</div>\n            )\n        } else {\n            return (\n                <div className=\"categoryList\" id=\"categoryRoot\">\n                    //xAccessToken = {this.props.xAccessToken}\n                </div>\n            );\n        }\n    }\n}\n\nexport default CategoryList;\n","import React, { Component } from 'react';\n\nclass LoginForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            username: '',\n            password: ''\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSubmit(event) {\n        this.props.login(this.state.username,this.state.password);\n        event.preventDefault();\n    }\n\n    render(){\n        return(\n            <form id={this.props.id}>\n                Enter your username and password\n                <label>\n                    Username:\n                    <input\n                        type='text'\n                        name='username'\n                        id='usernameInput'\n                        value={this.state.username}\n                        onChange = {this.handleChange}\n                    />\n                </label>\n                <label>\n                    Password:\n                    <input\n                        type='password'\n                        name='password'\n                        id='passwordInput'\n                        value={this.state.password}\n                        onChange = {this.handleChange}\n                    />\n                </label>\n                <input\n                    type='submit'\n                    name = 'submit'\n                    id='submitInput'\n                    value = 'submit'\n                    onClick={this.handleSubmit}\n                    />\n            </form>\n        )\n    }\n\n}\n\nexport default LoginForm;","import formUtil from './formUtil'\n\n\n\nconst apiUrl = \"https://insolent-preclude.herokuapp.com\";\n\nconst fetchUtil = {\n\n    getData:(route, callback) => {\n        fetchUtil.fetchData(route, 'get', null, callback);\n    },\n\n    postData: (route, data, callback) => {\n        fetchUtil.fetchData(route, 'post', data, callback);\n    },\n\n    putData: (route, data, callback) => {\n        fetchUtil.fetchData(route, 'put', data, callback);\n    },\n\n    deleteData: (route, data, callback) => {\n        fetchUtil.fetchData(route, 'delete', data, callback);\n    },\n\n    patchData: (route, data, callback) => {\n        fetchUtil.fetchData(route, 'patch', data, callback);\n    },\n\n    fetchData : (route, method, data, callback) => {\n        const headers = new Headers(\n            {\n                'Content-Type': 'application/x-www-form-urlencoded'\n\n            }\n        );\n\n        let requestProps = {\n            method: method,\n            mode: \"cors\",\n            redirect: \"follow\",\n            headers: headers,\n        };\n\n        if(method!=='get' && data){\n            requestProps.body=data;\n        }\n\n        const request = new Request(\n            apiUrl + route,\n            {\n                method: method,\n                mode: \"cors\",\n                redirect: \"follow\",\n                headers: headers,\n                body: data\n            }\n        );\n\n        fetch(request)\n            .then(\n                resp => {\n                    return resp.json();\n                })\n            .then(\n                respData=>{callback(respData)}\n            );\n    }\n}\nexport default fetchUtil;","import React, { Component } from 'react';\nimport formUtil from './util/formUtil'\nimport CategoryList from './CategoryList';\nimport LoginForm from './LoginForm';\nimport fetchUtil from './util/fetchUtil';\n\nclass User extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            username: undefined,\n            xAccessToken: undefined,\n            apiUrl: \"https://insolent-preclude.herokuapp.com\",\n            uiUrl: 'http://localhost:8080'\n        }\n        this.login=this.login.bind(this);\n    }\n\n    componentDidMount(){\n        //TODO 180925: login, get x-access-token\n\n    }\n\n\n    login(username, password){\n        const data = formUtil.composeXWwwFormUrlEncoded(\n            {\n                username:username,\n                password:password\n            }\n        );\n        fetchUtil.postData(\n            '/account/login',\n            data,\n            responseData=>{\n                this.setState({xAccessToken:responseData.token});\n            }\n        );\n\n\n    }\n\n\n\n    render(){\n        if(this.state.xAccessToken){\n          return(  <div id='userRoot'>\n                <CategoryList xAccessToken = {this.state.xAccessToken}/>\n            </div>)\n        } else {\n           return (<LoginForm login = {this.login} apiUrl = {this.state.apiUrl}/>)\n        }\n    }\n\n\n}\n\nexport default User;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport User from './User'\n\nclass App extends Component {\n  render() {\n    return (\n        <User/>\n    );\n  }\n}\n\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport unregister from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n//unregister();\n"],"sourceRoot":""}